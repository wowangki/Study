//================================== 타원의 충돌검출 =========================================//
		bool IsInCircle(D2D1_ELLIPSE from, D2D1_ELLIPSE to)
	{
		float angle = GetAngle(from.point, to.point);

		float fromCos = from.radiusX * cosf(angle);
		float fromSin = from.radiusY * sinf(angle);

		float toCos = to.radiusX * cosf(angle);
		float toSin = to.radiusY * sinf(angle);

		float result = sqrtf(pow(fromCos + toCos, 2) + pow(fromSin + toSin, 2));
		
		if (GetDistance(from.point, to.point) <= result) return true;

		return false;
	}

//================================== 원의 충돌검출 =========================================//	
D2D1_ELLIPSE from;
D2D1_ELLIPSE to;

float distance = sqartf(pow(from.point.x + to.point.x, 2) + pow(from.point.y + to.point.y, 2));

if(distance <= from.radiusX + to.radiusX ||
   distance <= from.raidusY + to.radiusY) return true;

※ 원은 radiusX와 radiusY가 같으므로 축약 가능

//================================ 보정 함수 (RidgidBody용) =======================================//
D2D_POINT_2F translate = { 0,0 };
		if (RectCollider* myCollider = dynamic_cast<RectCollider*>(collider)) {
			if (RectCollider* cachingOther = dynamic_cast<RectCollider*>((lOther.front() + i))) {
				translate = GetRevisionSize(myCollider->GetCollBox(), cachingOther->GetCollBox());

				if (!denyG) {
					if (abs(translate.x) > abs(translate.y)) {
						denyG = cachingOther;
					}
					else denyG = nullptr;
				}

				if (transform->GetWorldPos().y < cachingOther->GetTransform()->GetWorldPos().y) {
					translate.y *= -1;
				}
				if (transform->GetWorldPos().x < cachingOther->GetTransform()->GetWorldPos().x) {
					translate.x *= -1;
				}

				if (abs(translate.x) > abs(translate.y)) {
					transform->Translate({ 0, translate.y });
				}
				else if (abs(translate.x) < abs(translate.y)) {
					transform->Translate({ translate.x, 0 });
				}
				else {
					transform->Translate({ translate.x, translate.y });
				}

			}
			else if (CircleCollider* cachingOther = dynamic_cast<CircleCollider*>((lOther.front() + i))) {
				translate = GetRevisionSize(myCollider->GetCollBox(), cachingOther->GetCollBox());
			}
		}
		else if (CircleCollider* myCollider = dynamic_cast<CircleCollider*>(collider)) {
			if (RectCollider* cachingOther = dynamic_cast<RectCollider*>((lOther.front() + i))) {
				translate = GetRevisionSize(cachingOther->GetCollBox(), myCollider->GetCollBox());
			}
			else if (CircleCollider* cachingOther = dynamic_cast<CircleCollider*>((lOther.front() + i))) {
				translate = GetRevisionSize(myCollider->GetCollBox(), cachingOther->GetCollBox());

				if (!denyG) {
					if (transform->GetWorldPos().x ==	cachingOther->GetTransform()->GetWorldPos().x &&
						transform->GetWorldPos().y < cachingOther->GetTransform()->GetWorldPos().y) {
						denyG = cachingOther;
					}
					else denyG = nullptr;
				}

				transform->Translate({ translate.x, translate.y });
			}
		}

		//================================ 보정 수치 체크 함수 (RidgidBody용) =======================================//
			//D2D_POINT_2F temp = t1->GetComponent<RidgidBody>()->t_GetRevisionSize(t2->GetComponent<Collider>());
	//
	//WCHAR tString[256];
	//static TCHAR tTextString[] = L"WIDTH : %.2f\nHIGHT : %.2f\n";
	//
	//_stprintf_s(tString, tTextString, temp.x, temp.y);
	//_FONT->Render(tString, RectF(200.0f, 0.0f, 400.0f, 100.0f));

