============================================ 19.11.21 =============================================
#1
collider = new Collider(this)
AddComponent(collider)

#2
GameObejct* obj;
obj->AddComponent<Collider>(new Collider);

#3 - > 이거로
GameObject* obj
obj->AddComponent<Collider>();

#4 ImageModule.h
- Transform에 따라 Render 하는 함수 작성
- GetDxPoint함수는 private로 다른데서 사용 못하도록함
  해당 함수는 FrameRender할 때 이미지 돌리거나 반전 시킬때 기준점을
  Pivot에 따라 다르게 되므로 중앙에 맞추도록 함

#5 Collider.h / RectCollider.h / CircleCollider.h / UICollider.h

Collider.h
- Chaining Setting 함수 작성해서 생성할 때 Chaining으로 값 설정할 수 있게 작성

RectCollider.h / CircleCollider.h
- GameObject 포인터를 받는게 아니고 ICollision을 상속받은 클래스의 포인터를 받아서
쓰도록 변경

UICollider.h
- UI에서만 사용하는 Collider 작성
- UIClass에 따라서 마우스로 누를 때, 드래그 할 때, 마우스를 뗄때에 따라
사용할 인터페이스를 상속받은 아이들 별로 포인터를 받도록 함
- 중간에 인터페이스 없으면 해당 조건에서 사용 하지 않도록함
- enum 문으로 UI 타입에 따라 RECT로 쓸건지 ELLIPSE로 쓸건지 결정

===================================================================================================

============================================ 19.11.23 =============================================
#1. ImageModule.h
- 다른 함수 다 없애고 Transform만 받도록 할것인가 아님 걍 냅두고 쓸건가

#2. GameObject.h
- 나중에 vector만 남겨서 vector로 컴포넌트 관리할 것

※ 고려사항
- vector로 할건지 map으로 할건지 고민중 (map으로 하면 key값 뭘로 할건지)
- template함수로 만들어서 가져와도 괜찮을거같은 생각

#3. Animate.h / Animation.h
Animate.h
- FrameImage 돌리는 클래스
- 이 클래스는 Component로 할당 안할듯? (사실 고민중)

Animation.h
- Animate 관리할 클래스
- Index에 따라 해당 Animate만 돌릴 거임

※ 고려 사항
- 상태 (모션)에 따라서 Animation 인덱스 설정하는 것 고려중
- 그래서 key값에 따라 찾을지 index를 받아서 쓸지 고민중
- map으로 하면 key값을 뭘로 할건지, index로 하면 어떻게 넣을지 고민중

======================================== 진행 예정 사항 =============================================
#1. Animation
- Animate : FrameImage를 위한 클래스 (프레임 감기, 프레임 초기화)
- Animation (Component) : Animate 모음 -> 오브젝트에서 사용할 이미지 모음
- enum <-> int 로

#2. IState와 Animation과의 관계
- IState를 상속 받은 클래스들 (상태들)에 따라 Animation을 출력함
- IState를 vector index 또는 map key에 따라 Animation에 저장된 Animate를 사용
- IState에 따라 enum 변수를 호출하던가 enum 인덱스를 전달하던가

#3. 충돌, 탐색 알고리즘
- 일정 범위내에 있는 오브젝트끼리만 충돌처리
- A가 B에 대한 충돌처리를 했다면 B는 A에 대해 충돌처리를 하지 않는다.
- 이진 탐색기반으로 오브젝트 찾기
- 트리 구조로 오브젝트들 정렬
- 쿼드 트리 구조


if(_KEYCODE->IsStayKey(VK_LEFT)){
	pos.x -= speed;
}

===================================================================================================

============================================ 19.11.25 =============================================
#1. GameObject 수정
1) AddComponent 수정 (완료)
- dynamic_cast로 찾기

2) 

#2. Animate 수정
1) 프레임 감는 함수 수정 (완료)
- _TIMER->UpdateTime() 함수 참고하여 수정

#3. Collider 수정
1) 통과 불가하게 만들기 (완료)
- 충돌 시 오브젝트끼리 통과 불가하게 만들기
- 함수 추가 : Collider 간의 거리측정해서 맞닿아 있을 때보다 작으면 부딪힌 물체 들어온 거리만큼 재이동
- Transform : Translate 함수 추가

2) Trigger 만들기 (추후에)
- 충돌해도 오브젝트끼리 통과 가능
- 특정행위시에 해당 행위 실행

#4. 충돌검출함수

1) 정적오브젝트 검출클래스
- Actor가 가지고 있을거임 (Component)
- 자신의 위치에서 3x3위치의 정적 오브젝트 검출 (Tile)
- MapObject는 동적오브젝트에 포함시키든 따로 빼서 검출

2) 동적오브젝트 검출클래스
- 모든 물체 검출 (첫번째 방식)
- 특정 행위시에만 오브젝트 검출 (두번째 방식)

===================================================================================================

============================================ 19.11.27 =============================================
#1. Component 개편
1) 각 컴포넌트 카테고리 별로 분류
2) 컴토넌트 수정 / 작성 (Excel 파일 참고)

#2. GameObject AddComponent 개편
1) 함수 구현부 수정 - 기존 포인터만 가져오는 방식 수정
- 컴포넌트 초기화 방식 고민 (어떤식 으로 할지)

예제 1)
		Component* test = new Transform(D2D_RECT_F, D2D_SIZE_F, PIVOT, float);
		AddComponent<Transform>(test);
예제 2) 채택!!!!
		AddComponent<Transform>()->Init(D2D_RECT_F, D2D_SIZE_F, PIVOT, float);
예제 3)
		AddComponent<Transform>().SetPosChain(D2D_RECT_F)....

#3. Error 박스 수정
1) 기존 HRESULT 반환형에서 보이드형으로 해서 띄우기


## 좌표계
- 월드 좌표 : 절대 좌표 (실제 화면에 나오는 좌표)
- 로컬 좌표 : 상대 좌표 (월드 좌표 대비 자신의 좌표)


#4. Grid
1) Grid 좌표
2) Grid vector내의 Transform은 Grid class Transform을 부모로 갖는다.
3) PIVOT에 따라 배치 다르게
===================================================================================================
1. Transform Component 개편
- World (절대 좌표) / Local (상대 좌표) 개념 도입
- 트리 구조 도입

2. Grid Component 작성
- 그래프 (모눈종이) 개념 도입


===================================================================================================

============================================ 19.11.29 =============================================
1. 충돌체 개편
1) Collider Base
- Trigger 변수 추가
- 생성자에서 초기화 하지 않고 초기화 함수로 초기화

2) RectCollider
- 초기화시 Object가 가진 Transform을 부모로 가짐

3) Circle Collidier
- 초기화시 Object가 가진 Transform을 부모로 가짐

4) UI Collider
- GameObject를 상속받은 객체가 아닌 UI를 상속 받은 객체만 사용 가능
- Handler 별로 포인터 지정
- 다른 Collider와 달리 Transform은 그 오브젝트의 위치 값을 참조 (동일시)

2. Ridgidbody (강체) 생성
- 생성자 호출시 Transform을 Object의 Transform을 참조 (동일 시)
- Collider도 Object가 가지고 있으면 해당 오브젝트를 참조하고 없으면 생성해서 참조
- 초기화 시 질량 설정
- 충돌 검출 시 참조하는 Collider의 Trigger가 활성화 되어 있으면 Collider의 충돌 함수를 호출
- 비활성화 되어 있다면 자신의 함수를 사용

- 중력 사용 / 보정 사용
===================================================================================================

============================================ 19.11.30 =============================================
1. Ridgidbody
- 중력 / 위치 보정 수정
===================================================================================================

============================================ 19.12.01 =============================================
1. CollisionHelper
- GetOverLapSize 함수 작성
- 방향까지 계산함

1. Ridgidbody
- 중력 / 위치 보정 수정
- 위치 보정 보완 필요 (일정 각도에서 한쪽 방향으로만 보정)

===================================================================================================

============================================ 19.12.01 =============================================
1. Ridgidbody
- 중력 / 위치 보정 수정
- 중력 영향 받는 물체를 특정하는 연산을 중력함수에서 위치 보정 함수로 이동
- Collider 종류 별로 위치 보정 연산 분할 (모양에 따라 보정되는게 다름)

2. CollisionHelper
- GetOverlabSize 함수명 변경 (GetOverlabSize → GetRevisionSize)
- 타원과 타원의 충돌 함수 작성
- 타원과 사각형간 충돌은 미룸 (구현 방식 고민 & 다른 것 부터 진행)
===================================================================================================